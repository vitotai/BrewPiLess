<html>

<head>
    <title>Logging Setting</title>
    <script>
        var logurl = "log";

        function s_ajax(b) {
            var c = new XMLHttpRequest();
            c.onreadystatechange = function() {
                if (c.readyState == 4) {
                    if (c.status == 200) {
                        b.success(c.responseText)
                    } else {
                        c.onerror(c.status)
                    }
                }
            };
            c.ontimeout = function() {
                if (typeof b["timeout"] != "undefined") b.timeout();
                else c.onerror(-1)
            }, c.onerror = function(a) {
                if (typeof b["fail"] != "undefined") b.fail(a)
            };
            c.open(b.m, b.url, true);
            if (typeof b["data"] != "undefined") {
                c.setRequestHeader("Content-Type", (typeof b["mime"] != "undefined") ? b["mime"] : "application/x-www-form-urlencoded");
                c.send(b.data)
            } else c.send()
        }
        var EI = function(i) {
            return document.getElementById(i);
        };

        Number.prototype.format = function(n, x, s, c) {
            var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\D' : '$') + ')',
                num = this.toFixed(Math.max(0, ~~n));

            return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));
        };
        String.prototype.escapeJSON = function() {
            return this.replace(/[\\]/g, '\\\\')
                .replace(/[\"]/g, '\\\"')
                .replace(/[\/]/g, '\\/')
                .replace(/[\b]/g, '\\b')
                .replace(/[\f]/g, '\\f')
                .replace(/[\n]/g, '\\n')
                .replace(/[\r]/g, '\\r')
                .replace(/[\t]/g, '\\t');
        };

        var logs = {
            url: "loglist.php",
            rmurl: "loglist.php?rm=",
            starturl: "loglist.php?start=",
            stopurl: "loglist.php?stop=1",
            dlurl: "loglist.php?dl=",
            ll: [],
            fs: {},
            logging: false,
            vname: function(name) {
                if (name == "") return false;
                if (name.match(/[\W]/g)) return false;
                return true;
            },
            dupname: function(name) {
                var ret = false;
                this.ll.forEach(function(log) {
                    if (name == log.name) ret = true;
                });
                return ret;
            },
            fsinfo: function(s, u) {
                EI("fssize").innerHTML = s.format(0, 3, ',');
                EI("fsused").innerHTML = u.format(0, 3, ',');
                EI("fsfree").innerHTML = (s - u).format(0, 3, ',');
            },
            slog: function() {
                var t = this;
                if (t.logging) {
                    // stop
                    if (confirm("Stop current logging?")) {
                        //console.log("Stop logging");
                        var n = EI("logname").value.trim();
                        s_ajax({
                            url: t.stopurl + n,
                            m: "GET",
                            success: function(d) {
                                location.reload();
                            },
                            fail: function(d) {
                                alert("Failed to stop for:" + d);
                            }
                        });
                    }
                } else {
                    if (t.ll.length >= 10) {
                        alert("Too many logs. Delete some before creating new.");
                        return;
                    }
                    if ((t.fs.size - t.fs.used) <= t.fs.block * 2) {
                        alert("Not enough free space!");
                        return;
                    }
                    var name = EI("logname").value.trim();
                    if (t.vname(name) === false) {
                        alert("Invalid file name, no special characters allowed.");
                        return;
                    }
                    if (t.dupname(name)) {
                        alert("Duplicated name.");
                        return;
                    }

                    if (confirm("Start new logging?")) {
                        //console.log("Start logging");
                        s_ajax({
                            url: t.starturl + name,
                            m: "GET",
                            success: function(d) {
                                location.reload();
                            },
                            fail: function(d) {
                                alert("Failed to start for:" + d);
                            }
                        });
                    }
                }
            },
            recording: function(n, t) {
                this.logging = true;
                var d = new Date(t * 1000);
                EI("logtitle").innerHTML = "Recording since <b>" + d.toLocaleString() + "</b> ";
                var l = EI("logname");
                l.value = n;
                l.disabled = true;
                EI("logbutton").innerHTML = "STOP Logging";
            },
            stop: function() {
                this.logging = false;
                EI("logtitle").innerHTML = "New Log Name:";
                var l = EI("logname");
                l.value = "";
                l.disabled = false;
                EI("logbutton").innerHTML = "Start Logging";
            },
            //view:function(n){
            //	alert("View " + this.ll[n].name);
            //	window.open(this.vurl+ n);
            //},
            rm: function(n) {
                var t = this;
                if (confirm("Delete the log " + t.ll[n].name)) {
                    console.log("rm " + t.ll[n].name);
                    s_ajax({
                        url: t.rmurl + n,
                        m: "GET",
                        success: function(d) {
                            var r = JSON.parse(d);
                            t.fs = r;
                            t.fsinfo(r.size, r.used);
                            t.ll.splice(n, 1);
                            t.list(t.ll);
                        },
                        fail: function(d) {
                            alert("Failed to delete for:" + d);
                        }
                    });
                }
            },
            dl: function(n) {
                //console.log("DL " +this.ll[n].name);
                window.open(this.dlurl + n);
            },
            list: function(l) {
                var tb = EI("loglist").querySelector("tbody");
                var tr;
                while (tr = tb.querySelector("tr:nth-of-type(2)"))
                    tb.removeChild(tr);

                var t = this;
                var row = t.row;
                l.forEach(function(i, idx) {
                    var name = i.name;
                    var date = new Date(i.time * 1000);
                    var nr = row.cloneNode(true);
                    nr.querySelector(".logid").innerHTML = name;
                    nr.querySelector(".logdate").innerHTML = date.toLocaleString();
                    nr.querySelector(".dlbutton").onclick = function() {
                        t.dl(idx);
                    };
                    //		nr.querySelector(".viewbutton").onclick=function(){t.view(idx);};
                    nr.querySelector(".rmbutton").onclick = function() {
                        t.rm(idx);
                    };
                    tb.appendChild(nr);
                });

            },
            init: function() {
                var t = this;
                EI("logbutton").onclick = function() {
                    t.slog();
                };
                t.row = EI("loglist").querySelector("tr:nth-of-type(2)");
                t.row.parentNode.removeChild(t.row);
                s_ajax({
                    url: t.url,
                    m: "GET",
                    success: function(d) {
                        var r = JSON.parse(d);
                        t.fs = r.fs;
                        if (r.rec)
                            t.recording(r.log, r.start);
                        t.ll = r.list;
                        t.list(r.list);
                        t.fsinfo(r.fs.size, r.fs.used);
                    },
                    fail: function(e) {
                        alert("failed:" + e);
                    }
                });
            },
        };

        function checkurl(t) {
            if (t.value.trim().startsWith("https")) {
                alert("HTTPS is not supported");
            }
        }

        function checkformat(ta) {
            if (ta.value.length > 256) {
                ta.value = t.value.substring(0, 256);
            }
            EI("fmthint").innerHTML = "" + ta.value.length + "/256";
        }

        function mothod(c) {
            var inputs = document.querySelectorAll('input[name$="method"]');
            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].id != c.id)
                    inputs[i].checked = false;
            }
            window.selectedMethod = c.value;
        }

        function update() {

            if (typeof window.selectedMethod == "undefined") {
                alert("select Method!");
                return;
            }
            var format = EI("format").value.trim();

            if (window.selectedMethod == "GET") {
                var myRe = new RegExp("\s", "g");
                if (myRe.exec(format)) {
                    alert("space is not allowed");
                    return;
                }
            }

            var r = {};
            r.enabled = EI("enabled").checked;
            r.url = EI("url").value.trim();
            r.format = encodeURIComponent(format.escapeJSON());
            r.period = EI("period").value;
            r.method = (EI("m_post").checked) ? "POST" : "GET";
            r.type = EI("data-type").value.trim();
            s_ajax({
                url: logurl,
                m: "POST",
                data: "data=" + JSON.stringify(r),
                success: function(d) {
                    alert("done");
                },
                fail: function(e) {
                    alert("failed:" + e);
                }
            });

        }

        function load() {
            s_ajax({
                url: logurl + "?data=1",
                m: "GET",
                success: function(d) {
                        var r = JSON.parse(d);
                        if (typeof r.enabled == "undefined") return;
                        EI("enabled").checked = r.enabled;
                        window.selectedMethod = r.method;
                        EI("m_" + r.method.toLowerCase()).checked = true;
                        EI("url").value = (r.url === undefined) ? "" : r.url;
                        EI("data-type").value = (r.type === undefined) ? "" : r.type;
                        EI("format").value = (r.format === undefined) ? "" : r.format;
                        checkformat(EI("format"));
                        EI("period").value = (r.period === undefined) ? 300 : r.period;
                    }
                    /*,
                    	fail:function(d){
                     		alert("error :"+d);
                     	}*/
            });

            logs.init();
        }

        function showformat(lab) {
            var f = EI("formatlist");
            var rec = lab.getBoundingClientRect();
            f.style.display = "block";
            f.style.left = (rec.left) + "px";
            f.style.top = (rec.top + 100) + "px";
        }

        function hideformat() {
            EI("formatlist").style.display = "none";
        }
    </script>
    <style>
        #loglist td,
        #loglist tr,
        #loglist th,
        #loglist {
            border: 1px solid black;
        }
        
        fieldset {
            margin: 10px;
        }
        
        #fsinfo {
            margin: 10px;
        }
        
        #formatlist {
            display: none;
            position: absolute;
            border: 1px solid white;
            background: lightgray;
        }
        
        #formatlist table,
        #formatlist td,
        #formatlist th {
            border: 1px solid black;
            border-collapse: collapse;
        }
    </style>
</head>

<body onload="load();">
    <fieldset>
        <legend>Remote Log</legend>
        <form>
            <table>
                <tr>
                    <th>Enabled:</th>
                    <td><input type="checkbox" id="enabled" value="yes"></td>
                </tr>
                <tr>
                    <th>Method:</th>
                    <td><input type="checkbox" id="m_get" name="method" value="GET" onchange="mothod(this);">Get
                        <input type="checkbox" id="m_post" name="method" value="POST" onchange="mothod(this);">Post
                        <input type="checkbox" id="m_put" name="method" value="PUT" onchange="mothod(this);">Put </td>
                </tr>
                <tr>
                    <th>URL:</th>
                    <td><input type="text" id="url" size="128" placeholder="input link" onchange="checkurl(this);"></td>
                </tr>
                <tr>
                    <th></th>
                    <td>JSON:"application/json", Form Type:"application/x-www-form-urlencoded"</td>
                </tr>
                <tr>
                    <th>Data Type:</th>
                    <td><input type="text" id="data-type" size="42" placeholder="Content-Type" </td></tr>
                <tr>
                    <th></th>
                    <td><span onmouseover="showformat(this)" onmouseout="hideformat()"><u>Notations...</u></span></td>
                </tr>
                <tr>
                    <th>Format:</th>
                    <td><textarea id="format" rows="4" cols="64" oninput="checkformat(this)"></textarea></td>
                </tr>
                <tr>
                    <th></th>
                    <td>Characters:<span id="fmthint"></span></td>
                </tr>
                <tr>
                    <th>Log time period:</th>
                    <td><input type="text" id="period" size="4">Seconds</td>
                </tr>
                <tr>
                    <th></th>
                    <td><button type="button" onclick="update();">Update</button></td>
                </tr>
            </table>
        </form>
    </fieldset>
    <fieldset>
        <legend>Local Log</legend>
        <span id="logtitle">New Log Name:</span><input type="text" id="logname" size="24" maxlength="24"></input> <button id="logbutton">Start Log</button>
        <div id="fsinfo">
            Free Space: <span id="fsfree">0</span> Bytes, Used Space: <span id="fsused">0</span> Bytes, Total Space: <span id="fssize">0</span> Bytes
        </div>
        <table id="loglist">
            <tr>
                <th style="width:30%;">Log</th>
                <th style="width:40%;">Date</th>
                <th>Action</th>
            </tr>
            <tr>
                <td class="logid"></td>
                <td class="logdate"></td>
                <td><button class="dlbutton">Download</button><button class="rmbutton">Delete</button></td>
            </tr>
        </table>
    </fieldset>
    <div id="formatlist">
        <table>
            <tr>
                <th>%b</th>
                <td>beer temp</td>
            </tr>
            <tr>
                <th>%B</th>
                <td>beer setting</td>
            </tr>
            <tr>
                <th>%f</th>
                <td>fridge temp</td>
            </tr>
            <tr>
                <th>%F</th>
                <td>fridge setting</td>
            </tr>
            <tr>
                <th>%r</th>
                <td>room temp</td>
            </tr>
            <tr>
                <th>%g</th>
                <td>gravity</td>
            </tr>
            <tr>
                <th>%a</th>
                <td>Aux temp.</td>
            </tr>
            <tr>
                <th>%v</th>
                <td>device voltage</td>
            </tr>
            <tr>
                <th>%t</th>
                <td>Tilt Value</td>
            </tr>
            <tr>
                <th>%u</th>
                <td>Unix timestamp of last gravity update</td>
            </tr>
        </table>
    </div>
</body>

</html>